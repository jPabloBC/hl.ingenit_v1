import { NextRequest, NextResponse } from 'next/server';
import { supabase } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    console.log('üîç API: Iniciando creaci√≥n de suscripci√≥n');
    const { planId } = await request.json();
    console.log('üîç API: Plan ID recibido:', planId);

    if (!planId) {
      console.log('‚ùå API: Plan ID no proporcionado');
      return NextResponse.json(
        { error: 'planId es requerido' },
        { status: 400 }
      );
    }

    // Obtener usuario actual
    let user;
    const { data: { user: authUser }, error: userError } = await supabase.auth.getUser();
    console.log('üîç API: Usuario autenticado:', authUser ? 'S√≠' : 'No');
    
    if (userError || !authUser) {
      console.log('üîç API: Intentando autenticaci√≥n por token');
      // Si no hay usuario autenticado, intentar obtener desde el header de autorizaci√≥n
      const authHeader = request.headers.get('authorization');
      if (authHeader && authHeader.startsWith('Bearer ')) {
        const token = authHeader.substring(7);
        const { data: { user: tokenUser }, error: tokenError } = await supabase.auth.getUser(token);
        if (tokenError || !tokenUser) {
          console.log('‚ùå API: Token inv√°lido:', tokenError);
          return NextResponse.json(
            { error: 'Token de autorizaci√≥n inv√°lido' },
            { status: 401 }
          );
        }
        user = tokenUser;
        console.log('‚úÖ API: Usuario autenticado por token');
      } else {
        console.log('‚ùå API: No hay token de autorizaci√≥n');
        return NextResponse.json(
          { error: 'Usuario no autenticado' },
          { status: 401 }
        );
      }
    } else {
      user = authUser;
      console.log('‚úÖ API: Usuario autenticado por sesi√≥n');
    }

    // Verificar que el usuario no tenga ya una suscripci√≥n activa
    const { data: existingSubscription, error: existingError } = await supabase
      .from('hl_active_subscriptions')
      .select('id')
      .eq('user_id', user.id)
      .single();

    if (existingSubscription) {
      return NextResponse.json(
        { error: 'Ya tienes una suscripci√≥n activa' },
        { status: 400 }
      );
    }

    // Obtener business_id del usuario (opcional durante registro)
    const { data: businessData, error: businessError } = await supabase
      .from('hl_business')
      .select('id')
      .eq('user_id', user.id)
      .single();

    // Si no hay business_id, crear suscripci√≥n sin √©l (durante registro)
    const businessId = businessData?.id || null;

    // Crear suscripci√≥n usando la funci√≥n de base de datos
    console.log('üîç API: Creando suscripci√≥n con:', {
      user_id: user.id,
      business_id: businessId,
      plan_id: planId
    });
    
    // Verificar que el plan existe primero
    console.log('üîç API: Buscando plan con ID:', planId);
    const { data: planData, error: planError } = await supabase
      .from('hl_subscription_plans')
      .select('*')
      .eq('plan_id', planId)
      .single();
    
    console.log('üîç API: Resultado b√∫squeda plan:', { planData, planError });
    
    if (planError || !planData) {
      console.error('‚ùå API: Plan no encontrado:', planError);
      return NextResponse.json(
        { error: 'Plan no encontrado' },
        { status: 400 }
      );
    }
    
    console.log('‚úÖ API: Plan encontrado:', planData);
    
    const { data: subscriptionId, error: createError } = await supabase
      .rpc('create_user_subscription', {
        p_user_id: user.id,
        p_plan_id: planId,
        p_business_id: businessId
      });

    if (createError) {
      console.error('‚ùå API: Error creating subscription:', createError);
      return NextResponse.json(
        { error: `Error al crear suscripci√≥n: ${createError.message}` },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ API: Suscripci√≥n creada con ID:', subscriptionId);

    // Obtener la suscripci√≥n creada con informaci√≥n completa
    const { data: newSubscription, error: fetchError } = await supabase
      .from('hl_user_subscriptions')
      .select('*')
      .eq('id', subscriptionId)
      .single();

    if (fetchError) {
      console.error('Error fetching new subscription:', fetchError);
      return NextResponse.json(
        { error: 'Error al obtener informaci√≥n de la suscripci√≥n' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      subscription: newSubscription,
      message: 'Suscripci√≥n creada exitosamente'
    });

  } catch (error) {
    console.error('Error in create subscription API:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}
